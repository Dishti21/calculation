// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

contract ProposalContract {

    struct Proposal {
        string title;
        string description;
        uint yesVotes;
        uint noVotes;
    }

    Proposal[] public proposals;

    // Function to create a new proposal
    function create(string memory _title, string memory _description) public {
        Proposal memory newProposal = Proposal({
            title: _title,
            description: _description,
            yesVotes: 0,
            noVotes: 0
        });
        proposals.push(newProposal);
    }

    // Function to vote on a proposal
    function vote(uint _index, bool support) public {
        require(_index < proposals.length, "Proposal does not exist.");
        Proposal storage proposal = proposals[_index];
        if (support) {
            proposal.yesVotes++;
        } else {
            proposal.noVotes++;
        }
    }

    // Function to calculate the state of a proposal
    function calculateState(uint _index) public view returns (string memory) {
        require(_index < proposals.length, "Proposal does not exist.");
        Proposal memory proposal = proposals[_index];

        if (proposal.yesVotes >= 2 * proposal.noVotes) {
            return "Succeeded";
        } else {
            return "Failed";
        }
    }
}
